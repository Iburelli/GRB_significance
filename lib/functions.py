import os
from os.path import join, isfile
import glob

def read_input_file(catalog_path,file_name,visibility_cat):
    '''
    Function that reads paths from configuration file and choses how to deal with files
    Output values are
     - path to the directory containing XML files (or their directories in case of multiple sources)
     - path to the visibility catalog, *.npy, generated by runCatVisibility
     - the list of xml files
    '''

    if '$' in catalog_path:
        catalog = os.path.expandvars(catalog_path)
    else:
        catalog = catalog_path

    if visibility_cat == None:
        output = 'visibility_output.npy'
    elif '$' in visibility_cat:
        output = os.path.expandvars(visibility_cat)
    else:
        output = visibility_cat

    if file_name == None:
        runids = glob.glob(catalog_path + '/**/*.xml', recursive=True)
        if len(runids) == 0:
            raise ValueError('No valid XML file found')

    elif type(file_name) == str:
        if not isfile(join(catalog, file_name)):
            raise ValueError(f'Specified template does not exist in catalog')
        runids = [file_name]
    else:
        runids = file_name
        for runid in runids:
            if not isfile(join(catalog, runid)):
                raise ValueError(f'Specified template {runid} does not exist in catalog')
    runids = sorted(runids)
    return (catalog,output,runids)

# ----------------------------------------------------------------------------------------------------
# --------------function to append new line to txt file
def append_new_line(file_name, text_to_append):
    """Append given text as a new line at the end of file"""
    # Open the file in append & read mode ('a+')
    with open(file_name, "a+") as file_object:
        # Move read cursor to the start of file.
        file_object.seek(0)
        # If file is not empty then append '\n'
        data = file_object.read(100)
        if len(data) > 0:
            file_object.write("\n")
        # Append text at the end of file
        file_object.write(text_to_append)

# -------------------------------------------------------------------------------------------------
def irf_selection(site,z,delta_t):
    if delta_t < 94.9 * 60:   #times are converted in SECONDS
        irf_duration = '0.5h'
    elif 94.9 * 60 < delta_t < 15.8 * 60 * 60:
        irf_duration = '5h'
    elif delta_t > 15.8 * 60 * 60:
        irf_duration = '50h'

    if z == 60:
        energy = 0.110          #energies are in GeV
        #sim_e_max = 5.6234

    elif z == 40:
        energy = 0.04
        #sim_e_max = 5.6234
    else:
        energy = 0.03
        #sim_e_max = 10.


    name = (f'{site}_z{z}_{irf_duration}')
    return [name , energy]
